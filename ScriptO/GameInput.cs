//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/SchoolStolovks/Script/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""1034ab0f-49cb-4969-8be1-c27b5f55da78"",
            ""actions"": [
                {
                    ""name"": ""Interactive"",
                    ""type"": ""Button"",
                    ""id"": ""bd998e5a-6ace-45e7-9f65-8fc9e35315d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scream"",
                    ""type"": ""Button"",
                    ""id"": ""3dc5d1dc-e946-47bf-afe2-117fc6a8fa81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitState"",
                    ""type"": ""Button"",
                    ""id"": ""b0076250-eb99-429c-ba54-7339a8b63168"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c682626-534c-41b3-956b-a309f3fde053"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e630043-0d55-422a-981e-9e8dccbd0dcd"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scream"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27a2e36c-03d1-439b-8cf0-2a2948f2e99c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Interactive = m_GamePlay.FindAction("Interactive", throwIfNotFound: true);
        m_GamePlay_Scream = m_GamePlay.FindAction("Scream", throwIfNotFound: true);
        m_GamePlay_ExitState = m_GamePlay.FindAction("ExitState", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_Interactive;
    private readonly InputAction m_GamePlay_Scream;
    private readonly InputAction m_GamePlay_ExitState;
    public struct GamePlayActions
    {
        private @GameInput m_Wrapper;
        public GamePlayActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interactive => m_Wrapper.m_GamePlay_Interactive;
        public InputAction @Scream => m_Wrapper.m_GamePlay_Scream;
        public InputAction @ExitState => m_Wrapper.m_GamePlay_ExitState;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @Interactive.started += instance.OnInteractive;
            @Interactive.performed += instance.OnInteractive;
            @Interactive.canceled += instance.OnInteractive;
            @Scream.started += instance.OnScream;
            @Scream.performed += instance.OnScream;
            @Scream.canceled += instance.OnScream;
            @ExitState.started += instance.OnExitState;
            @ExitState.performed += instance.OnExitState;
            @ExitState.canceled += instance.OnExitState;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @Interactive.started -= instance.OnInteractive;
            @Interactive.performed -= instance.OnInteractive;
            @Interactive.canceled -= instance.OnInteractive;
            @Scream.started -= instance.OnScream;
            @Scream.performed -= instance.OnScream;
            @Scream.canceled -= instance.OnScream;
            @ExitState.started -= instance.OnExitState;
            @ExitState.performed -= instance.OnExitState;
            @ExitState.canceled -= instance.OnExitState;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnInteractive(InputAction.CallbackContext context);
        void OnScream(InputAction.CallbackContext context);
        void OnExitState(InputAction.CallbackContext context);
    }
}
